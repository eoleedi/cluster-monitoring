---
- name: 檢查 NVIDIA Driver 是否已安裝
  command: nvidia-smi
  register: nvidia_driver_check
  failed_when: false
  changed_when: false

- name: 顯示 NVIDIA 驅動狀態
  debug:
    msg: NVIDIA 驅動{{ '已安裝' if nvidia_driver_check.rc == 0 else '未安裝' }}

- name: 確認 NVIDIA 驅動已安裝
  fail:
    msg: 請先安裝 NVIDIA 驅動程序
  when: nvidia_driver_check.rc != 0

- name: 檢查 pip3 是否已安裝
  command: which pip3
  register: pip_check
  failed_when: false
  changed_when: false

- name: 安裝 pip3
  apt:
    name:
      - python3-pip
    state: present
  when: pip_check.rc != 0

- name: 檢查 Docker 是否已安裝
  command: docker --version
  register: docker_check
  failed_when: false
  changed_when: false

- name: 安裝 Docker (Debian/Ubuntu)
  when:
    - ansible_os_family == "Debian"
    - docker_check.rc != 0
  block:
    - name: 添加 Docker 儲存庫公鑰
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: 添加 Docker 儲存庫
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/{{ ansible_distribution | lower }} {{ ansible_distribution_release }} stable
        state: present

    - name: 安裝 Docker 套件
      apt:
        name:
          - docker-ce
          - docker-compose
        state: present

    - name: 安裝 Docker Python 模組
      pip:
        name: docker
        executable: pip3


- name: 安裝 NVIDIA Container Toolkit (Debian/Ubuntu)
  block:
    - name: 添加 NVIDIA GPU 儲存庫公鑰
      apt_key:
        url: https://nvidia.github.io/libnvidia-container/gpgkey
        state: present
      when: ansible_os_family == "Debian"

    - name: 添加 NVIDIA Container Toolkit 儲存庫
      get_url:
        url: https://nvidia.github.io/libnvidia-container/stable/deb/nvidia-container-toolkit.list
        dest: /etc/apt/sources.list.d/nvidia-container-toolkit.list
        mode: '0644'
      when: ansible_os_family == "Debian"

    - name: 更新 apt 套件索引
      apt:
        update_cache: yes
      when: ansible_os_family == "Debian"

    - name: 安裝 NVIDIA Container Toolkit
      apt:
        name:
          - nvidia-container-toolkit
        state: present
      when: ansible_os_family == "Debian"

    - name: 重新配置 Docker 以支援 NVIDIA Container Runtime
      command: nvidia-ctk runtime configure --runtime=docker

    - name: 重新啟動 Docker 服務以套用 NVIDIA Container Runtime 配置
      systemd:
        name: docker
        state: restarted

- name: 啟動 Docker 服務
  systemd:
    name: docker
    state: started
    enabled: yes

- name: 創建 DCGM-Exporter 目錄
  file:
    path: "{{ dcgm_exporter_dir }}"
    state: directory
    mode: 0755

- name: 拷貝自定義 collectors 配置文件
  copy:
    src: custom-collectors.csv
    dest: "{{ dcgm_exporter_dir }}/custom-collectors.csv"
    mode: 0644

- name: 拉取 DCGM-Exporter Docker 映像
  community.general.docker_image:
    name: "{{ dcgm_exporter_image }}"
    source: pull
    force_source: yes

- name: 檢查現有的 DCGM-Exporter 容器
  command: docker ps -a --filter name=dcgm-exporter -q
  register: dcgm_exporter_container
  changed_when: false

- name: 移除現有的 DCGM-Exporter 容器
  command: docker rm -f dcgm-exporter
  when: dcgm_exporter_container.stdout != ""
  failed_when: false

- name: 運行 DCGM-Exporter Docker 容器
  community.docker.docker_container:
    name: dcgm-exporter
    image: "{{ dcgm_exporter_image }}"
    restart_policy: unless-stopped
    state: started
    runtime: nvidia
    capabilities:
      - SYS_ADMIN
    published_ports:
      - 9400:9400
    volumes:
      - "{{ dcgm_exporter_dir }}/custom-collectors.csv:/etc/dcgm-exporter/custom-collectors.csv:ro"
    command: -f /etc/dcgm-exporter/custom-collectors.csv

- name: Drop other traffic
  ansible.builtin.iptables:
    chain: DOCKER-USER
    action: insert
    protocol: tcp
    destination_port: 9400
    jump: DROP
    state: present

- name: Allow trusted IPs to container port
  ansible.builtin.iptables:
    chain: DOCKER-USER
    action: insert
    protocol: tcp
    destination_port: 9400
    source: "{{ item }}"
    jump: ACCEPT
    state: present
  loop: "{{ dcgm_exporter_firewall_allow_from }}"


- name: 啟動 Docker 服務
  systemd:
    name: docker
    state: started
    enabled: yes
