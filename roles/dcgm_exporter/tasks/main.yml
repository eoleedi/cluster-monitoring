---
- name: 檢查 NVIDIA Driver 是否已安裝
  command: nvidia-smi
  register: nvidia_driver_check
  failed_when: false
  changed_when: false

- name: 顯示 NVIDIA 驅動狀態
  debug:
    msg: NVIDIA 驅動{{ '已安裝' if nvidia_driver_check.rc == 0 else '未安裝' }}

- name: 確認 NVIDIA 驅動已安裝
  fail:
    msg: 請先安裝 NVIDIA 驅動程序
  when: nvidia_driver_check.rc != 0

- name: 檢查 pip3 是否已安裝
  command: which pip3
  register: pip_check
  failed_when: false
  changed_when: false

- name: 安裝 pip3
  apt:
    name:
      - python3-pip
    state: present
  when: pip_check.rc != 0

- name: 檢查 Docker 是否已安裝
  command: docker --version
  register: docker_check
  failed_when: false
  changed_when: false

- name: 安裝 Docker (Debian/Ubuntu)
  when:
    - ansible_os_family == "Debian"
    - docker_check.rc != 0
  block:
    - name: 創建 keyrings 目錄
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    - name: 下載並添加 Docker GPG 金鑰
      get_url:
        url: https://download.docker.com/linux/ubuntu/gpg
        dest: /etc/apt/keyrings/docker.asc
        mode: '0644'

    - name: 添加 Docker 儲存庫
      deb822_repository:
        name: docker
        types: [deb]
        uris: https://download.docker.com/linux/{{ ansible_distribution | lower }}
        suites: ["{{ ansible_distribution_release }}"]
        components: [stable]
        architectures: [amd64]
        signed_by: /etc/apt/keyrings/docker.asc
        state: present

    - name: 更新 apt 快取
      apt:
        update_cache: yes

    - name: 安裝 Docker 套件
      apt:
        name:
          - docker-ce
          - docker-compose
        state: present

    - name: 安裝 Docker Python 模組
      pip:
        name: docker
        executable: pip3

- name: Check if nvidia-ctk binary exists
  ansible.builtin.stat:
    path: /usr/bin/nvidia-ctk
  register: ctk_stat

- name: 移除舊的 NVIDIA GPG 金鑰 (如果存在)
  apt_key:
    url: https://nvidia.github.io/libnvidia-container/gpgkey
    state: absent
  when: ansible_os_family == "Debian"
  failed_when: false

- name: 移除舊的 Docker GPG 金鑰 (如果存在)
  apt_key:
    url: https://download.docker.com/linux/ubuntu/gpg
    state: absent
  when: ansible_os_family == "Debian"
  failed_when: false

- name: 移除舊的儲存庫檔案 (如果存在)
  file:
    path: "{{ item }}"
    state: absent
  loop:
    - /etc/apt/sources.list.d/nvidia-container-toolkit.list
    - /etc/apt/sources.list.d/docker.list
  when: ansible_os_family == "Debian"
  failed_when: false

- name: 安裝 NVIDIA Container Toolkit (Debian/Ubuntu)
  when:
    - ansible_os_family == "Debian"
    - not ctk_stat.stat.exists
  block:
    - name: 下載並添加 NVIDIA Container Toolkit GPG 金鑰
      get_url:
        url: https://nvidia.github.io/libnvidia-container/gpgkey
        dest: /etc/apt/keyrings/nvidia-container-toolkit.asc
        mode: '0644'

    - name: 添加 NVIDIA Container Toolkit 儲存庫
      deb822_repository:
        name: nvidia-container-toolkit
        types: [deb]
        uris: https://nvidia.github.io/libnvidia-container/stable/deb
        suites: [/]
        signed_by: /etc/apt/keyrings/nvidia-container-toolkit.asc
        state: present

    - name: 更新 apt 快取
      apt:
        update_cache: yes

    - name: 安裝 NVIDIA Container Toolkit
      apt:
        name:
          - nvidia-container-toolkit
        state: present

- name: 檢查 Docker 是否已配置 NVIDIA Container Runtime
  command: docker info
  register: docker_runtimes_check
  changed_when: false

- name: 重新配置 Docker 以支援 NVIDIA Container Runtime
  when:
    - "'nvidia' not in docker_runtimes_check.stdout"
  block:
    - name: 配置 Docker
      command: nvidia-ctk runtime configure --runtime=docker
      changed_when: true

    - name: 重新啟動 Docker 服務以套用 NVIDIA Container Runtime 配置
      systemd:
        name: docker
        state: restarted

- name: 啟動 Docker 服務
  systemd:
    name: docker
    state: started
    enabled: yes

- name: 創建 DCGM-Exporter 目錄
  file:
    path: "{{ dcgm_exporter_dir }}"
    state: directory
    mode: 0755

- name: 拉取 DCGM-Exporter Docker 映像
  community.general.docker_image:
    name: "{{ dcgm_exporter_image }}"
    source: pull
    force_source: yes

- name: 檢查現有的 DCGM-Exporter 容器
  command: docker ps -a --filter name=dcgm-exporter -q
  register: dcgm_exporter_container
  changed_when: false

- name: 移除現有的 DCGM-Exporter 容器
  command: docker rm -f dcgm-exporter
  when: dcgm_exporter_container.stdout != ""
  failed_when: false
  changed_when: dcgm_exporter_container.stdout != ""

- name: 運行 DCGM-Exporter Docker 容器
  community.docker.docker_container:
    name: dcgm-exporter
    image: "{{ dcgm_exporter_image }}"
    restart_policy: always
    state: started
    runtime: nvidia
    capabilities:
      - SYS_ADMIN
    published_ports:
      - 9400:9400

- name: Drop other traffic
  ansible.builtin.iptables:
    chain: DOCKER-USER
    action: insert
    protocol: tcp
    destination_port: 9400
    jump: DROP
    state: present

- name: Allow trusted IPs to container port
  ansible.builtin.iptables:
    chain: DOCKER-USER
    action: insert
    protocol: tcp
    destination_port: 9400
    source: "{{ item }}"
    jump: ACCEPT
    state: present
  loop: "{{ dcgm_exporter_firewall_allow_from }}"


- name: 啟動 Docker 服務
  systemd:
    name: docker
    state: started
    enabled: yes
